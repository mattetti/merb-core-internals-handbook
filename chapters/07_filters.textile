h1. Filters

Lets take a step back and have a closer look at how filters work.
Filters are provided by Merb::AbstractController. There are two
types of filters, before and after filters, stored in arrays:

[Merb::AbstractController]
<pre><code>
class_inheritable_accessor :_before_filters, :_after_filters
self._before_filters, self._after_filters = [], []
</pre></code>

So you can access filter lists directly if you really feel you need.
Each filter is stored internally as a 2-tuple of symbol/proc and options.
Options are normalized so it's possible to use both Symbols and Strings.

Filters are added using before and after methods:

[Merb::AbstractController.after]
<pre><code>
  def self.after(filter = nil, opts = {}, &block)
  add_filter(self._after_filters, filter || block, opts)
end
</pre></code>

[Merb::AbstractController.before]
<pre><code>
  def self.before(filter = nil, opts = {}, &block)
  add_filter(self._before_filters, filter || block, opts)
end
</pre></code>

As you can see, both of them delegate to add_filter.